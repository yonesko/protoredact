// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v4.25.0
// source: testproto/testproto.proto

package testproto

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Enum1 int32

const (
	Enum1_UNSPECIFIED  Enum1 = 0
	Enum1_ENUM_1_VAL_1 Enum1 = 1
)

// Enum value maps for Enum1.
var (
	Enum1_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "ENUM_1_VAL_1",
	}
	Enum1_value = map[string]int32{
		"UNSPECIFIED":  0,
		"ENUM_1_VAL_1": 1,
	}
)

func (x Enum1) Enum() *Enum1 {
	p := new(Enum1)
	*p = x
	return p
}

func (x Enum1) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Enum1) Descriptor() protoreflect.EnumDescriptor {
	return file_testproto_testproto_proto_enumTypes[0].Descriptor()
}

func (Enum1) Type() protoreflect.EnumType {
	return &file_testproto_testproto_proto_enumTypes[0]
}

func (x Enum1) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Enum1.Descriptor instead.
func (Enum1) EnumDescriptor() ([]byte, []int) {
	return file_testproto_testproto_proto_rawDescGZIP(), []int{0}
}

type WithAllFieldTypes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to PaymentToken:
	//
	//	*WithAllFieldTypes_Token
	//	*WithAllFieldTypes_Cryptogram
	PaymentToken         isWithAllFieldTypes_PaymentToken       `protobuf_oneof:"payment_token"`
	FieldInt64           int64                                  `protobuf:"varint,1,opt,name=fieldInt64,proto3" json:"fieldInt64,omitempty"`
	FieldInt64Optional   *int64                                 `protobuf:"varint,5,opt,name=fieldInt64Optional,proto3,oneof" json:"fieldInt64Optional,omitempty"`
	FieldStringSensitive string                                 `protobuf:"bytes,2,opt,name=fieldStringSensitive,proto3" json:"fieldStringSensitive,omitempty"`
	FieldBool            bool                                   `protobuf:"varint,3,opt,name=fieldBool,proto3" json:"fieldBool,omitempty"`
	MessageList          []*WithAllFieldTypes_Internal          `protobuf:"bytes,4,rep,name=messageList,proto3" json:"messageList,omitempty"`
	MessageListSensitive []*WithAllFieldTypes_Internal          `protobuf:"bytes,43,rep,name=messageListSensitive,proto3" json:"messageListSensitive,omitempty"`
	Enum1                Enum1                                  `protobuf:"varint,6,opt,name=enum1,proto3,enum=testproto.Enum1" json:"enum1,omitempty"`
	Enum1Sensitive       Enum1                                  `protobuf:"varint,63,opt,name=enum1Sensitive,proto3,enum=testproto.Enum1" json:"enum1Sensitive,omitempty"`
	MapField             map[string]*WithAllFieldTypes_Internal `protobuf:"bytes,45,rep,name=mapField,proto3" json:"mapField,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *WithAllFieldTypes) Reset() {
	*x = WithAllFieldTypes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testproto_testproto_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithAllFieldTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithAllFieldTypes) ProtoMessage() {}

func (x *WithAllFieldTypes) ProtoReflect() protoreflect.Message {
	mi := &file_testproto_testproto_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithAllFieldTypes.ProtoReflect.Descriptor instead.
func (*WithAllFieldTypes) Descriptor() ([]byte, []int) {
	return file_testproto_testproto_proto_rawDescGZIP(), []int{0}
}

func (m *WithAllFieldTypes) GetPaymentToken() isWithAllFieldTypes_PaymentToken {
	if m != nil {
		return m.PaymentToken
	}
	return nil
}

func (x *WithAllFieldTypes) GetToken() string {
	if x, ok := x.GetPaymentToken().(*WithAllFieldTypes_Token); ok {
		return x.Token
	}
	return ""
}

func (x *WithAllFieldTypes) GetCryptogram() string {
	if x, ok := x.GetPaymentToken().(*WithAllFieldTypes_Cryptogram); ok {
		return x.Cryptogram
	}
	return ""
}

func (x *WithAllFieldTypes) GetFieldInt64() int64 {
	if x != nil {
		return x.FieldInt64
	}
	return 0
}

func (x *WithAllFieldTypes) GetFieldInt64Optional() int64 {
	if x != nil && x.FieldInt64Optional != nil {
		return *x.FieldInt64Optional
	}
	return 0
}

func (x *WithAllFieldTypes) GetFieldStringSensitive() string {
	if x != nil {
		return x.FieldStringSensitive
	}
	return ""
}

func (x *WithAllFieldTypes) GetFieldBool() bool {
	if x != nil {
		return x.FieldBool
	}
	return false
}

func (x *WithAllFieldTypes) GetMessageList() []*WithAllFieldTypes_Internal {
	if x != nil {
		return x.MessageList
	}
	return nil
}

func (x *WithAllFieldTypes) GetMessageListSensitive() []*WithAllFieldTypes_Internal {
	if x != nil {
		return x.MessageListSensitive
	}
	return nil
}

func (x *WithAllFieldTypes) GetEnum1() Enum1 {
	if x != nil {
		return x.Enum1
	}
	return Enum1_UNSPECIFIED
}

func (x *WithAllFieldTypes) GetEnum1Sensitive() Enum1 {
	if x != nil {
		return x.Enum1Sensitive
	}
	return Enum1_UNSPECIFIED
}

func (x *WithAllFieldTypes) GetMapField() map[string]*WithAllFieldTypes_Internal {
	if x != nil {
		return x.MapField
	}
	return nil
}

type isWithAllFieldTypes_PaymentToken interface {
	isWithAllFieldTypes_PaymentToken()
}

type WithAllFieldTypes_Token struct {
	Token string `protobuf:"bytes,52,opt,name=token,proto3,oneof"`
}

type WithAllFieldTypes_Cryptogram struct {
	Cryptogram string `protobuf:"bytes,16,opt,name=cryptogram,proto3,oneof"`
}

func (*WithAllFieldTypes_Token) isWithAllFieldTypes_PaymentToken() {}

func (*WithAllFieldTypes_Cryptogram) isWithAllFieldTypes_PaymentToken() {}

type SensitiveData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// if set, hides only specified keys, otherwise the whole field
	MapKeysToRedact []string `protobuf:"bytes,1,rep,name=map_keys_to_redact,json=mapKeysToRedact,proto3" json:"map_keys_to_redact,omitempty"`
}

func (x *SensitiveData) Reset() {
	*x = SensitiveData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testproto_testproto_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SensitiveData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensitiveData) ProtoMessage() {}

func (x *SensitiveData) ProtoReflect() protoreflect.Message {
	mi := &file_testproto_testproto_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensitiveData.ProtoReflect.Descriptor instead.
func (*SensitiveData) Descriptor() ([]byte, []int) {
	return file_testproto_testproto_proto_rawDescGZIP(), []int{1}
}

func (x *SensitiveData) GetMapKeysToRedact() []string {
	if x != nil {
		return x.MapKeysToRedact
	}
	return nil
}

type WithAllFieldTypes_Internal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldInt64                int64                                  `protobuf:"varint,1,opt,name=fieldInt64,proto3" json:"fieldInt64,omitempty"`
	FieldStringSensitive      string                                 `protobuf:"bytes,2,opt,name=fieldStringSensitive,proto3" json:"fieldStringSensitive,omitempty"`
	SensitiveMap              map[string]*WithAllFieldTypes_Internal `protobuf:"bytes,45,rep,name=sensitiveMap,proto3" json:"sensitiveMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapWithSensitiveKey       map[string]*WithAllFieldTypes_Internal `protobuf:"bytes,445,rep,name=mapWithSensitiveKey,proto3" json:"mapWithSensitiveKey,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapWithSensitiveKeyIntKey map[int64]*WithAllFieldTypes_Internal  `protobuf:"bytes,63,rep,name=mapWithSensitiveKeyIntKey,proto3" json:"mapWithSensitiveKeyIntKey,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Recursive                 *WithAllFieldTypes_Internal            `protobuf:"bytes,23,opt,name=recursive,proto3" json:"recursive,omitempty"`
	RecursiveSensitive        *WithAllFieldTypes_Internal            `protobuf:"bytes,21,opt,name=recursiveSensitive,proto3" json:"recursiveSensitive,omitempty"`
}

func (x *WithAllFieldTypes_Internal) Reset() {
	*x = WithAllFieldTypes_Internal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testproto_testproto_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithAllFieldTypes_Internal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithAllFieldTypes_Internal) ProtoMessage() {}

func (x *WithAllFieldTypes_Internal) ProtoReflect() protoreflect.Message {
	mi := &file_testproto_testproto_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithAllFieldTypes_Internal.ProtoReflect.Descriptor instead.
func (*WithAllFieldTypes_Internal) Descriptor() ([]byte, []int) {
	return file_testproto_testproto_proto_rawDescGZIP(), []int{0, 0}
}

func (x *WithAllFieldTypes_Internal) GetFieldInt64() int64 {
	if x != nil {
		return x.FieldInt64
	}
	return 0
}

func (x *WithAllFieldTypes_Internal) GetFieldStringSensitive() string {
	if x != nil {
		return x.FieldStringSensitive
	}
	return ""
}

func (x *WithAllFieldTypes_Internal) GetSensitiveMap() map[string]*WithAllFieldTypes_Internal {
	if x != nil {
		return x.SensitiveMap
	}
	return nil
}

func (x *WithAllFieldTypes_Internal) GetMapWithSensitiveKey() map[string]*WithAllFieldTypes_Internal {
	if x != nil {
		return x.MapWithSensitiveKey
	}
	return nil
}

func (x *WithAllFieldTypes_Internal) GetMapWithSensitiveKeyIntKey() map[int64]*WithAllFieldTypes_Internal {
	if x != nil {
		return x.MapWithSensitiveKeyIntKey
	}
	return nil
}

func (x *WithAllFieldTypes_Internal) GetRecursive() *WithAllFieldTypes_Internal {
	if x != nil {
		return x.Recursive
	}
	return nil
}

func (x *WithAllFieldTypes_Internal) GetRecursiveSensitive() *WithAllFieldTypes_Internal {
	if x != nil {
		return x.RecursiveSensitive
	}
	return nil
}

var file_testproto_testproto_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*SensitiveData)(nil),
		Field:         1200,
		Name:          "testproto.sensitive_data",
		Tag:           "bytes,1200,opt,name=sensitive_data",
		Filename:      "testproto/testproto.proto",
	},
}

// Extension fields to descriptorpb.FieldOptions.
var (
	// optional testproto.SensitiveData sensitive_data = 1200;
	E_SensitiveData = &file_testproto_testproto_proto_extTypes[0]
)

var File_testproto_testproto_proto protoreflect.FileDescriptor

var file_testproto_testproto_proto_rawDesc = []byte{
	0x0a, 0x19, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x65, 0x73, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x74, 0x65, 0x73,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb0, 0x0d, 0x0a, 0x11, 0x57, 0x69, 0x74,
	0x68, 0x41, 0x6c, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x16,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x25, 0x0a, 0x0a, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x82, 0x4b, 0x00, 0x48,
	0x00, 0x52, 0x0a, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x1e, 0x0a,
	0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x33, 0x0a,
	0x12, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x12, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x88,
	0x01, 0x01, 0x12, 0x37, 0x0a, 0x14, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0x82, 0x4b, 0x00, 0x52, 0x14, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x42, 0x6f, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x47, 0x0a, 0x0b, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x41,
	0x6c, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x5e, 0x0a, 0x14, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x2b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69, 0x74,
	0x68, 0x41, 0x6c, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x42, 0x03, 0x82, 0x4b, 0x00, 0x52, 0x14, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x65, 0x6e, 0x75, 0x6d, 0x31, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x10, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x31, 0x52, 0x05, 0x65, 0x6e, 0x75, 0x6d, 0x31, 0x12, 0x3d, 0x0a, 0x0e, 0x65, 0x6e,
	0x75, 0x6d, 0x31, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x3f, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x10, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x31, 0x42, 0x03, 0x82, 0x4b, 0x00, 0x52, 0x0e, 0x65, 0x6e, 0x75, 0x6d, 0x31,
	0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x46, 0x0a, 0x08, 0x6d, 0x61, 0x70,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x2d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x41, 0x6c, 0x6c, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x61, 0x70, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x1a, 0xcb, 0x07, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x1e,
	0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x37,
	0x0a, 0x14, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x6e,
	0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x82, 0x4b,
	0x00, 0x52, 0x14, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x60, 0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x73, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x4d, 0x61, 0x70, 0x18, 0x2d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x41, 0x6c,
	0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x03, 0x82, 0x4b, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x6e,
	0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x85, 0x01, 0x0a, 0x13, 0x6d, 0x61,
	0x70, 0x57, 0x69, 0x74, 0x68, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x4b, 0x65,
	0x79, 0x18, 0xbd, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x41, 0x6c, 0x6c, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
	0x4d, 0x61, 0x70, 0x57, 0x69, 0x74, 0x68, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x4b, 0x65, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x12, 0x82, 0x4b, 0x0f, 0x0a, 0x0d, 0x68,
	0x69, 0x64, 0x65, 0x5f, 0x74, 0x68, 0x69, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x52, 0x13, 0x6d, 0x61,
	0x70, 0x57, 0x69, 0x74, 0x68, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x4b, 0x65,
	0x79, 0x12, 0x8e, 0x01, 0x0a, 0x19, 0x6d, 0x61, 0x70, 0x57, 0x69, 0x74, 0x68, 0x53, 0x65, 0x6e,
	0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x18,
	0x3f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x41, 0x6c, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4d, 0x61, 0x70,
	0x57, 0x69, 0x74, 0x68, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x4b, 0x65, 0x79,
	0x49, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0a, 0x82, 0x4b, 0x07,
	0x0a, 0x05, 0x38, 0x37, 0x36, 0x35, 0x34, 0x52, 0x19, 0x6d, 0x61, 0x70, 0x57, 0x69, 0x74, 0x68,
	0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x74, 0x4b,
	0x65, 0x79, 0x12, 0x43, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x41, 0x6c, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x09, 0x72, 0x65,
	0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x12, 0x5a, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x75, 0x72,
	0x73, 0x69, 0x76, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x57, 0x69, 0x74, 0x68, 0x41, 0x6c, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x42, 0x03, 0x82, 0x4b, 0x00, 0x52,
	0x12, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74,
	0x69, 0x76, 0x65, 0x1a, 0x66, 0x0a, 0x11, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3b, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x41, 0x6c, 0x6c, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x6d, 0x0a, 0x18, 0x4d,
	0x61, 0x70, 0x57, 0x69, 0x74, 0x68, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x4b,
	0x65, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3b, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x41, 0x6c, 0x6c, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x73, 0x0a, 0x1e, 0x4d, 0x61,
	0x70, 0x57, 0x69, 0x74, 0x68, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x4b, 0x65,
	0x79, 0x49, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3b,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x41, 0x6c,
	0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x62, 0x0a, 0x0d, 0x4d, 0x61, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x3b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69,
	0x74, 0x68, 0x41, 0x6c, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x3c, 0x0a, 0x0d, 0x53,
	0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x12,
	0x6d, 0x61, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x64, 0x61,
	0x63, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x61, 0x70, 0x4b, 0x65, 0x79,
	0x73, 0x54, 0x6f, 0x52, 0x65, 0x64, 0x61, 0x63, 0x74, 0x2a, 0x2a, 0x0a, 0x05, 0x45, 0x6e, 0x75,
	0x6d, 0x31, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x31, 0x5f, 0x56, 0x41,
	0x4c, 0x5f, 0x31, 0x10, 0x01, 0x3a, 0x5f, 0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xb0, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74,
	0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_testproto_testproto_proto_rawDescOnce sync.Once
	file_testproto_testproto_proto_rawDescData = file_testproto_testproto_proto_rawDesc
)

func file_testproto_testproto_proto_rawDescGZIP() []byte {
	file_testproto_testproto_proto_rawDescOnce.Do(func() {
		file_testproto_testproto_proto_rawDescData = protoimpl.X.CompressGZIP(file_testproto_testproto_proto_rawDescData)
	})
	return file_testproto_testproto_proto_rawDescData
}

var file_testproto_testproto_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_testproto_testproto_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_testproto_testproto_proto_goTypes = []interface{}{
	(Enum1)(0),                         // 0: testproto.Enum1
	(*WithAllFieldTypes)(nil),          // 1: testproto.WithAllFieldTypes
	(*SensitiveData)(nil),              // 2: testproto.SensitiveData
	(*WithAllFieldTypes_Internal)(nil), // 3: testproto.WithAllFieldTypes.Internal
	nil,                                // 4: testproto.WithAllFieldTypes.MapFieldEntry
	nil,                                // 5: testproto.WithAllFieldTypes.Internal.SensitiveMapEntry
	nil,                                // 6: testproto.WithAllFieldTypes.Internal.MapWithSensitiveKeyEntry
	nil,                                // 7: testproto.WithAllFieldTypes.Internal.MapWithSensitiveKeyIntKeyEntry
	(*descriptorpb.FieldOptions)(nil),  // 8: google.protobuf.FieldOptions
}
var file_testproto_testproto_proto_depIdxs = []int32{
	3,  // 0: testproto.WithAllFieldTypes.messageList:type_name -> testproto.WithAllFieldTypes.Internal
	3,  // 1: testproto.WithAllFieldTypes.messageListSensitive:type_name -> testproto.WithAllFieldTypes.Internal
	0,  // 2: testproto.WithAllFieldTypes.enum1:type_name -> testproto.Enum1
	0,  // 3: testproto.WithAllFieldTypes.enum1Sensitive:type_name -> testproto.Enum1
	4,  // 4: testproto.WithAllFieldTypes.mapField:type_name -> testproto.WithAllFieldTypes.MapFieldEntry
	5,  // 5: testproto.WithAllFieldTypes.Internal.sensitiveMap:type_name -> testproto.WithAllFieldTypes.Internal.SensitiveMapEntry
	6,  // 6: testproto.WithAllFieldTypes.Internal.mapWithSensitiveKey:type_name -> testproto.WithAllFieldTypes.Internal.MapWithSensitiveKeyEntry
	7,  // 7: testproto.WithAllFieldTypes.Internal.mapWithSensitiveKeyIntKey:type_name -> testproto.WithAllFieldTypes.Internal.MapWithSensitiveKeyIntKeyEntry
	3,  // 8: testproto.WithAllFieldTypes.Internal.recursive:type_name -> testproto.WithAllFieldTypes.Internal
	3,  // 9: testproto.WithAllFieldTypes.Internal.recursiveSensitive:type_name -> testproto.WithAllFieldTypes.Internal
	3,  // 10: testproto.WithAllFieldTypes.MapFieldEntry.value:type_name -> testproto.WithAllFieldTypes.Internal
	3,  // 11: testproto.WithAllFieldTypes.Internal.SensitiveMapEntry.value:type_name -> testproto.WithAllFieldTypes.Internal
	3,  // 12: testproto.WithAllFieldTypes.Internal.MapWithSensitiveKeyEntry.value:type_name -> testproto.WithAllFieldTypes.Internal
	3,  // 13: testproto.WithAllFieldTypes.Internal.MapWithSensitiveKeyIntKeyEntry.value:type_name -> testproto.WithAllFieldTypes.Internal
	8,  // 14: testproto.sensitive_data:extendee -> google.protobuf.FieldOptions
	2,  // 15: testproto.sensitive_data:type_name -> testproto.SensitiveData
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	15, // [15:16] is the sub-list for extension type_name
	14, // [14:15] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_testproto_testproto_proto_init() }
func file_testproto_testproto_proto_init() {
	if File_testproto_testproto_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_testproto_testproto_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithAllFieldTypes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testproto_testproto_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SensitiveData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testproto_testproto_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithAllFieldTypes_Internal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_testproto_testproto_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*WithAllFieldTypes_Token)(nil),
		(*WithAllFieldTypes_Cryptogram)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_testproto_testproto_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_testproto_testproto_proto_goTypes,
		DependencyIndexes: file_testproto_testproto_proto_depIdxs,
		EnumInfos:         file_testproto_testproto_proto_enumTypes,
		MessageInfos:      file_testproto_testproto_proto_msgTypes,
		ExtensionInfos:    file_testproto_testproto_proto_extTypes,
	}.Build()
	File_testproto_testproto_proto = out.File
	file_testproto_testproto_proto_rawDesc = nil
	file_testproto_testproto_proto_goTypes = nil
	file_testproto_testproto_proto_depIdxs = nil
}
